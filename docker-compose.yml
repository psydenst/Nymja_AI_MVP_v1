services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DEBUG=True
      - DATABASE_HOST=${POSTGRES_HOST}
      - DATABASE_PORT=${POSTGRES_PORT}
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    depends_on:
      - db
    container_name: backend
    networks:
      - system

    # adicione isto:
    command: >
      gunicorn backend.asgi:application
      -k uvicorn.workers.UvicornWorker
      -w 10
      --worker-connections 100
      --bind 0.0.0.0:8000
      --timeout 120

  frontend:
    build:
      context: ./nextjs-chat/   # The directory where the Dockerfile of the frontend is located
      dockerfile: ./Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    networks:
      - system

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    container_name: postgres
    ports:
      - "5432:5432"  # Port for communication with Django
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - system

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "4555:80"  # Port to access pgAdmin at localhost:4555
    depends_on:
      - db
    links:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./backend/pgadmin-config/servers.json:/pgadmin4/servers.json  # Move this under pgadmin service
    networks:
      - system
  
  
volumes:
  postgres_data:
  pgadmin_data:

networks:
  system:
    driver: bridge
